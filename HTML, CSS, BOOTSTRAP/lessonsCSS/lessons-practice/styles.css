body {
    font-family: "Raleway", "Helvetica" ,"Arial", sans-serif;
    margin: 0;
    padding: 0;
}

ul {
    list-style-type: none;
    margin: 0;
}

a {
    text-decoration: none;
    color: inherit; /* inherit color from parent */
}

header {
    height: 100vh;
    background: url("https://sentientmedia.org/wp-content/uploads/2023/03/Copy-of-Untitled-Design-12.png") no-repeat center center/cover;
    background-attachment: fixed;
    padding: 20px;
    position: relative;
    display: flex;
    flex-direction: column;
}

header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
}

nav {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.logo{
    line-height: 2.4;
}

.logo-image {
    width: 80px;
}

.nav-list {
    display: flex;
    align-items: center;
    gap: 10px;
}

.nav-list li{
    color: white;
    font-weight: bold;
    font-size: 14px;
    text-align: center;
}

.nav-list li:last-of-type a{
    display: flex;
    align-items: center;
    gap: 10px;
    background-color: #dd3d53;
    padding: 10px;
    border-radius: 3px;
    font-size: 12px;
    font-weight: bold;
}

.nav-list li:last-of-type a svg{
    fill: white;
    width: 14px;
}

.nav-list li:last-of-type a:hover{
    background-color: #c12a3f;
    transition: all 0.25s ease;
}
.nav-item-link {
    position: relative;
    transition: all 0.25s ease;
}

.nav-item-link::after{
    content: '';
    background-color: #17baaa;
    height: 2px;
    width: 100%;
    position: absolute;
    bottom: -8px;
    left: 0;
    transform: scaleX(0);
    transition: all 0.25s ease;
}

.nav-item-link:hover {
    color: #17baaa;
}

.nav-item-link:hover::after {
    transform: scaleX(1);
}

.nav-buttons {
    display: none;
}

.nav-button {
    color: white;
    font-size: 30px;
    cursor: pointer;
    transition: all 0.25s ease;
}

.header-content {
    position: relative;
    z-index: 1;
    margin: auto 0;
}

.header-title{
    line-height: calc(1.8 * clamp(1.5rem, 0.8333rem + 3.5556vw, 3.5rem));
    font-size: clamp(1.5rem, 0.8333rem + 3.5556vw, 3.5rem);
    color: #17baaa;
}

.header-title::first-line{
    color:white;
}

.header-button {
    display: inline-block;
    background-color: #17baaa;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    font-weight: bold;
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.header-button:hover {
    background-color: #0f8f8a;
}



@media (max-width: 960px) {
    .nav-list {
        display: none;
    }
    .nav-buttons {
        display: block;
    }
    .nav-button:hover {
        color: #17baaa;
        font-size: 31px;
    }
}
/*
    Псевдокласи для вибору елементів за їх позицією та станом:

    :first-child - Вибирає елемент, якщо він є ПЕРШИМ дочірнім елементом у своєму батькові.
    - Приклад: `p:first-child` вибере `<p>`, тільки якщо він є найпершим елементом всередині батька.

    :nth-child(n) - Вибирає елемент за його порядковим номером (n) серед ВСІХ дочірніх елементів.
    - Він не зважає на тип тегу. `li:nth-child(2)` спрацює, тільки якщо `<li>` є другим елементом загалом.

    :nth-of-type(n) - Вибирає елемент за його порядковим номером (n) серед елементів ТІЛЬКИ СВОГО ТИПУ.
    - Це більш гнучкий варіант. `li:nth-of-type(2)` вибере другий `<li>` у батька, ігноруючи інші теги.

    :hover - Застосовує стилі, коли курсор миші знаходиться над елементом.

            Margin (зовнішній відступ)
---------------------------------------
|   Border (рамка)                    |
|   -------------------------------   |
|  |   Padding (внутрішній відступ)|  |
|  |   -------------------------   |  |
|  |  |                         |  |  |
|  |  |     Content (контент)   |  |  |
|  |  |                         |  |  |
|  |   -------------------------   |  |
|   -------------------------------   |
---------------------------------------

margin: накладає зовнішній відступ навколо елемента, відокремлюючи його від сусідніх елементів.
padding: додає внутрішній відступ всередині елемента, відокремлюючи контент від його меж.
border: створює рамку навколо елемента, яка може мати товщину, стиль та колір.
Ці властивості взаємодіють між собою, створюючи візуальну структуру елемента на сторінці.
box-sizing: border-box; - це CSS-властивість, яка змінює спосіб обчислення ширини та висоти елемента.

flexbox - це CSS-модель, яка дозволяє легко розташовувати елементи в рядку або стовпчику, вирівнювати їх та контролювати простір між ними. Вона забезпечує гнучкість у дизайні та адаптивність до різних розмірів екранів.
display: flex; - це CSS-властивість, яка активує flexbox для елемента, дозволяючи йому використовувати гнучке розташування дочірніх елементів.
flex-direction: column; - це CSS-властивість, яка визначає напрямок розташування дочірніх елементів у flex-контейнері. Значення "column" вказує, що елементи будуть розташовані вертикально, один підодним, замість горизонтального розташування (рядком).
flex-wrap: wrap; - це CSS-властивість, яка дозволяє дочірнім елементам flex-контейнера переноситися на новий рядок, якщо вони не вміщаються в один рядок. Це корисно для адаптивного дизайну, коли елементи повинні змінювати своє розташування залежно від розміру екрану.
flex: 1; - це CSS-властивість, яка дозволяє дочірнім елементам flex-контейнера займати рівний простір у доступному просторі
flex-grow: 1; - це CSS-властивість, яка визначає, як елементи в flex-контейнері можуть розширюватися, щоб заповнити доступний простір. Значення "1" означає, що елемент може розширюватися, займаючи весь доступний простір у контейнері, якщо інші елементи не займають його.
flex-basis: 0; - це CSS-властивість, яка визначає початковий розмір елемента в flex-контейнері. Значення "0" означає, що елемент не має початкового розміру і буде розширюватися або зменшуватися відповідно до доступного простору та інших властивостей flex, таких як flex-grow і flex-shrink.
flex-shrink: 0; - це CSS-властивість, яка визначає, як елемти в flex-контейнері можуть зменшуватися, якщо доступного простору недостатньо. Значення "0" означає, що елемент не буде зменшуватися, навіть якщо інші елементи потребують більше місця.
order: це CSS-властивість, яка визначає порядок, в якому елементи з однаковим значенням flex-grow будуть розташовані в flex-контейнері. Значення "1" означає, що цей елемент буде розташований першим серед інших елементів з однаковим значенням flex-grow.
justify-content: center; - це CSS-властивість, яка визначає, як елементи в flex-контейнері будуть вирівнюватися по горизонталі. Значення "center" означає, що елементи будуть розташовані по центру контейнера.
align-items: center; - це CSS-властивість, яка визначає, як елементи в flex-контейнері будуть вирівнюватися по вертикалі.

Position 
static: це стандартне позиціонування елементів у CSS. Елементи з позицією static розташовуються у звичайному потоці документа, 
без використання властивостей top, right, bottom або left. Вони не можуть бути зміщені відносно інших елементів.

relative: це позиціонування, яке дозволяє зміщувати елемент відносно його початкового положення у звичайному потоці документа. 
Елементи з позицією relative можуть бути зміщені за допомогою властивостей top, right, bottom, left, але вони все ще займають місце у потоці документа.

absolute: це позиціонування, яке дозволяє розташовувати елемент відносно найближчого предка з позиціонуванням relative, absolute або fixed. 
Елементи з позицією absolute не займають місце у потоці документа і можуть бути розташовані в будь-якому місці на сторінці за допомогою властивостей top, right, bottom, left.

fixed: це позиціонування, яке дозволяє розташовувати елемент відносно вікна перегляду браузера. 
Елементи з позицією fixed залишаються на місці при прокручуванні сторінки і не займають місце у потоці документа. Вони можуть бути розташовані в будь-якому місці на сторінці за допомогою властивостей top, right, bottom, left.

sticky: це позиціонування, яке поєднує властивості relative і fixed. Елементи з позицією sticky спочатку розташовуються у звичайному потоці документа, 
але коли вони досягають певної позиції при прокручуванні сторінки, вони "прилипає" до цієї позиції і стають
фіксованими. Вони можуть бути зміщені за допомогою властивостей top, right, bottom, left, але їх початкове положення залишається узвичайному потоці документа.

z-index: це CSS-властивість, яка визначає порядок накладання елементів на сторінці. 
Елементи з більшим значенням z-index будуть розташовані поверх елементів з меншим значенням z-index. Це дозволяє керувати видимістю елементів, які перекривають один одного. 
Значення z-index може бути як позитивним, так і негативним, а також нульовим. Елементи з позиціонуванням relative, absolute, fixed або sticky можуть використовувати z-index для визначення порядку накладання.

Pseudo-elements (псевдоелементи) - це спеціальні селектори в CSS, які дозволяють стилізувати частини елементів, не змінюючи їх HTML-структуру.
Вони починаються з двокрапки (:) і використовуються для створення віртуальних елементів, таких як перший рядок тексту, перший символ,
або для додавання контенту перед або після елемента.
Наприклад, ::before і ::after дозволяють додавати контент до початку або кінця елемента, а ::first-line і ::first-letter дозволяють стилізувати перший рядок або першу літеру тексту.
Псевдоелементи не є частиною HTML-структури, але вони дозволяють додавати
стилі та контент до елементів, що робить їх корисними для
створення візуальних ефектів і покращення дизайну без зміни
HTML-коду.
Pseudo-classes (псевдокласи) - це спеціальні селектори
в CSS, які дозволяють стилізувати елементи на основі їх стану
або позиції в документі. Вони починаються з одного двокрапки

transform - це CSS-властивість, яка дозволяє змінювати розташування, розмір, обертання та інші властивості елементів на сторінці.
rotate - це значення властивості transform, яке дозволяє обертати елемент навколо його центру або заданої точки.
scale - це значення властивості transform, яке дозволяє змінювати розмір елемента, збільшуючи або зменшуючи його масштаб.
translate - це значення властивості transform, яке дозволяє переміщувати елемент в горизонтальному або вертикальному напрямку, змінюючи його положення на сторінці.
skew - це значення властивості transform, яке дозволяє нахиляти елемент в горизонтальному або вертикальному напрямку, створюючи ефект перспективи.
matrix - це значення властивості transform, яке дозволяє застосовувати складні трансформації до елемента, використовуючи матрицю перетворення.
transform-origin - це CSS-властивість, яка визначає точку, відносно якої будуть застосовуватися трансформації (наприклад, обертання або масштабування) до елемента.
bottom right - це значення властивості transform-origin, яке визначає точку перетворення в нижньому правому куті елемента.

Семантичні елементи в HTML - це елементи, які мають чітке значення та призначення, що допомагає зрозуміти структуру та зміст документа. Вони використовуються для покращення доступності, SEO та розуміння контенту. 
Приклади семантичних елементів включають <header>, <main>, <nav>, <article>, <section>, <aside> та <footer>.
Використання семантичних елементів робить HTML-код більш зрозумілим і структурованим, що полегшує роботу з ним як для розробників, так і для користувачів.

background - це CSS-властивість, яка дозволяє встановлювати фон для елемента.
background-image - це підвластивість background, яка дозволяє встановлювати зображення як фон для елемента.
background-position - це CSS-властивість, яка визначає позицію фону (зображення) всередині елемента.
background-size - це CSS-властивість, яка визначає розмір фону (зображення) всередині елемента.
background-repeat - це CSS-властивість, яка визначає, чи буде фон (зображення) повторюватися по горизонталі або вертикалі, або не буде повторюватися взагалі.
background-color - це CSS-властивість, яка дозволяє встановлювати колір фону для елемента
background-attachment - це CSS-властивість, яка визначає, як фон (зображення) буде поводитися при прокручуванні сторінки. 
Значення "fixed" означає, що фон залишатиметься на місці при прокручуванні,
а значення "scroll" означає, що фон буде прокручуватися разом зі сторінкою.
background-clip - це CSS-властивість, яка визначає, як
фон (зображення) буде обрізатися відносно меж елемента.
Значення "content-box" означає, що фон буде обрізаний по межах
контенту, "padding-box" - по межах внутрішнього відступу (padding),
а "border-box" - по межах рамки (border).
background-origin - це CSS-властивість, яка визначає, відносно яких меж
буде розташовуватися фон (зображення) елемента.
Значення "content-box" означає, що фон буде розташований відносно
меж контенту, "padding-box" - відносно меж внутрішнього відступ
(padding), а "border-box" - відносно меж рамки (border).
box-shadow - це CSS-властивість, яка дозволяє додавати тінь до елементів на сторінці.
*/
